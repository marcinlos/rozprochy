// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `Bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____generated_Bank_h__
#define ____generated_Bank_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Bank
{

class SystemManager;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Bank::SystemManager>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Bank::SystemManager*);

class Account;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Bank::Account>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Bank::Account*);

}

}

namespace Bank
{

class SystemManager;
bool operator==(const SystemManager&, const SystemManager&);
bool operator<(const SystemManager&, const SystemManager&);
::Ice::Object* upCast(::Bank::SystemManager*);
typedef ::IceInternal::Handle< ::Bank::SystemManager> SystemManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bank::SystemManager> SystemManagerPrx;
void __patch(SystemManagerPtr&, const ::Ice::ObjectPtr&);

class Account;
bool operator==(const Account&, const Account&);
bool operator<(const Account&, const Account&);
::Ice::Object* upCast(::Bank::Account*);
typedef ::IceInternal::Handle< ::Bank::Account> AccountPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Bank::Account> AccountPrx;
void __patch(AccountPtr&, const ::Ice::ObjectPtr&);

}

namespace Bank
{

class BankException : public ::Ice::UserException
{
public:

    BankException() {}
    virtual ~BankException() throw();

    virtual ::std::string ice_name() const;
    virtual BankException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static BankException __BankException_init;

class RegisterException : public ::Bank::BankException
{
public:

    RegisterException() {}
    virtual ~RegisterException() throw();

    virtual ::std::string ice_name() const;
    virtual RegisterException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::BankException::__writeImpl;
    using ::Bank::BankException::__readImpl;
    #endif
};

class InvalidPesel : public ::Bank::RegisterException
{
public:

    InvalidPesel() {}
    virtual ~InvalidPesel() throw();

    virtual ::std::string ice_name() const;
    virtual InvalidPesel* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::RegisterException::__writeImpl;
    using ::Bank::RegisterException::__readImpl;
    #endif
};

class AccountAlreadyExists : public ::Bank::RegisterException
{
public:

    AccountAlreadyExists() {}
    virtual ~AccountAlreadyExists() throw();

    virtual ::std::string ice_name() const;
    virtual AccountAlreadyExists* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::RegisterException::__writeImpl;
    using ::Bank::RegisterException::__readImpl;
    #endif
};

class EmptyPassword : public ::Bank::RegisterException
{
public:

    EmptyPassword() {}
    virtual ~EmptyPassword() throw();

    virtual ::std::string ice_name() const;
    virtual EmptyPassword* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::RegisterException::__writeImpl;
    using ::Bank::RegisterException::__readImpl;
    #endif
};

class LoginException : public ::Bank::BankException
{
public:

    LoginException() {}
    virtual ~LoginException() throw();

    virtual ::std::string ice_name() const;
    virtual LoginException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::BankException::__writeImpl;
    using ::Bank::BankException::__readImpl;
    #endif
};

class MultiLogin : public ::Bank::LoginException
{
public:

    MultiLogin() {}
    virtual ~MultiLogin() throw();

    virtual ::std::string ice_name() const;
    virtual MultiLogin* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::LoginException::__writeImpl;
    using ::Bank::LoginException::__readImpl;
    #endif
};

class AuthenticationFailed : public ::Bank::LoginException
{
public:

    AuthenticationFailed() {}
    virtual ~AuthenticationFailed() throw();

    virtual ::std::string ice_name() const;
    virtual AuthenticationFailed* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::LoginException::__writeImpl;
    using ::Bank::LoginException::__readImpl;
    #endif
};

class OperationException : public ::Bank::BankException
{
public:

    OperationException() {}
    virtual ~OperationException() throw();

    virtual ::std::string ice_name() const;
    virtual OperationException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::BankException::__writeImpl;
    using ::Bank::BankException::__readImpl;
    #endif
};

class SessionException : public ::Bank::BankException
{
public:

    SessionException() {}
    virtual ~SessionException() throw();

    virtual ::std::string ice_name() const;
    virtual SessionException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::BankException::__writeImpl;
    using ::Bank::BankException::__readImpl;
    #endif
};

class InvalidSession : public ::Bank::SessionException
{
public:

    InvalidSession() {}
    virtual ~InvalidSession() throw();

    virtual ::std::string ice_name() const;
    virtual InvalidSession* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::SessionException::__writeImpl;
    using ::Bank::SessionException::__readImpl;
    #endif
};

class SessionExpired : public ::Bank::SessionException
{
public:

    SessionExpired() {}
    virtual ~SessionExpired() throw();

    virtual ::std::string ice_name() const;
    virtual SessionExpired* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Bank::SessionException::__writeImpl;
    using ::Bank::SessionException::__readImpl;
    #endif
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Bank::BankException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::RegisterException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::InvalidPesel>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::AccountAlreadyExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::EmptyPassword>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::LoginException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::MultiLogin>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::AuthenticationFailed>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::OperationException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::SessionException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::InvalidSession>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Bank::SessionExpired>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Bank
{

class Callback_SystemManager_createAccount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SystemManager_createAccount_Base> Callback_SystemManager_createAccountPtr;

class Callback_SystemManager_login_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SystemManager_login_Base> Callback_SystemManager_loginPtr;

class Callback_SystemManager_keepalive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SystemManager_keepalive_Base> Callback_SystemManager_keepalivePtr;

class Callback_SystemManager_logout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SystemManager_logout_Base> Callback_SystemManager_logoutPtr;

class Callback_Account_getBalance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Account_getBalance_Base> Callback_Account_getBalancePtr;

class Callback_Account_withdraw_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Account_withdraw_Base> Callback_Account_withdrawPtr;

class Callback_Account_deposit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Account_deposit_Base> Callback_Account_depositPtr;

}

namespace IceProxy
{

namespace Bank
{

class SystemManager : virtual public ::IceProxy::Ice::Object
{
public:

    void createAccount(const ::std::string& pesel, const ::std::string& password)
    {
        createAccount(pesel, password, 0);
    }
    void createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        createAccount(pesel, password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createAccount(pesel, password, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createAccount(pesel, password, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createAccount(pesel, password, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createAccount(pesel, password, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_createAccount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_createAccount(pesel, password, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createAccount(const ::std::string& pesel, const ::std::string& password)
    {
        return begin_createAccount(pesel, password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return begin_createAccount(pesel, password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAccount(pesel, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAccount(pesel, password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Bank::Callback_SystemManager_createAccountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAccount(pesel, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& __ctx, const ::Bank::Callback_SystemManager_createAccountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createAccount(pesel, password, &__ctx, __del, __cookie);
    }

    void end_createAccount(const ::Ice::AsyncResultPtr&);
    
private:

    void createAccount(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createAccount(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string login(const ::std::string& pesel, const ::std::string& password)
    {
        return login(pesel, password, 0);
    }
    ::std::string login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return login(pesel, password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_login(const ::std::string& pesel, const ::std::string& password, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_login(pesel, password, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_login(const ::std::string& pesel, const ::std::string& password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_login(pesel, password, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_login(pesel, password, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_login(pesel, password, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* ctx, const ::IceInternal::Function<void (const ::std::string&)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_login(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_login(pesel, password, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_login(const ::std::string& pesel, const ::std::string& password)
    {
        return begin_login(pesel, password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& __ctx)
    {
        return begin_login(pesel, password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& pesel, const ::std::string& password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(pesel, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(pesel, password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& pesel, const ::std::string& password, const ::Bank::Callback_SystemManager_loginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(pesel, password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context& __ctx, const ::Bank::Callback_SystemManager_loginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_login(pesel, password, &__ctx, __del, __cookie);
    }

    ::std::string end_login(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string login(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_login(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void keepalive(const ::std::string& sessionId)
    {
        keepalive(sessionId, 0);
    }
    void keepalive(const ::std::string& sessionId, const ::Ice::Context& __ctx)
    {
        keepalive(sessionId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_keepalive(const ::std::string& sessionId, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_keepalive(sessionId, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_keepalive(const ::std::string& sessionId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_keepalive(sessionId, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_keepalive(const ::std::string& sessionId, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_keepalive(sessionId, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_keepalive(const ::std::string& sessionId, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_keepalive(sessionId, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_keepalive(const ::std::string& sessionId, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_keepalive(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_keepalive(sessionId, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_keepalive(const ::std::string& sessionId)
    {
        return begin_keepalive(sessionId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_keepalive(const ::std::string& sessionId, const ::Ice::Context& __ctx)
    {
        return begin_keepalive(sessionId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_keepalive(const ::std::string& sessionId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepalive(sessionId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepalive(const ::std::string& sessionId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepalive(sessionId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepalive(const ::std::string& sessionId, const ::Bank::Callback_SystemManager_keepalivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepalive(sessionId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepalive(const ::std::string& sessionId, const ::Ice::Context& __ctx, const ::Bank::Callback_SystemManager_keepalivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepalive(sessionId, &__ctx, __del, __cookie);
    }

    void end_keepalive(const ::Ice::AsyncResultPtr&);
    
private:

    void keepalive(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_keepalive(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void logout(const ::std::string& sessionId)
    {
        logout(sessionId, 0);
    }
    void logout(const ::std::string& sessionId, const ::Ice::Context& __ctx)
    {
        logout(sessionId, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_logout(const ::std::string& sessionId, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_logout(sessionId, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_logout(const ::std::string& sessionId, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_logout(sessionId, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_logout(const ::std::string& sessionId, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_logout(sessionId, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_logout(const ::std::string& sessionId, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_logout(sessionId, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_logout(const ::std::string& sessionId, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_logout(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_logout(sessionId, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_logout(const ::std::string& sessionId)
    {
        return begin_logout(sessionId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::std::string& sessionId, const ::Ice::Context& __ctx)
    {
        return begin_logout(sessionId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::std::string& sessionId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(sessionId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::std::string& sessionId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(sessionId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::std::string& sessionId, const ::Bank::Callback_SystemManager_logoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(sessionId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_logout(const ::std::string& sessionId, const ::Ice::Context& __ctx, const ::Bank::Callback_SystemManager_logoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_logout(sessionId, &__ctx, __del, __cookie);
    }

    void end_logout(const ::Ice::AsyncResultPtr&);
    
private:

    void logout(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_logout(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SystemManager> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_secure(bool __secure) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_twoway() const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_oneway() const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_batchOneway() const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_datagram() const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_batchDatagram() const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_compress(bool __compress) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SystemManager> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SystemManager*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Account : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int getBalance()
    {
        return getBalance(0);
    }
    ::Ice::Int getBalance(const ::Ice::Context& __ctx)
    {
        return getBalance(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getBalance(const ::IceInternal::Function<void (::Ice::Int)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBalance(0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBalance(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBalance(0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getBalance(const ::Ice::Context& ctx, const ::IceInternal::Function<void (::Ice::Int)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getBalance(&ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_getBalance(const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getBalance(&ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getBalance(const ::Ice::Context* ctx, const ::IceInternal::Function<void (::Ice::Int)>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getBalance(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getBalance(ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getBalance()
    {
        return begin_getBalance(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::Context& __ctx)
    {
        return begin_getBalance(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBalance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBalance(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Bank::Callback_Account_getBalancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBalance(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::Context& __ctx, const ::Bank::Callback_Account_getBalancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBalance(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getBalance(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getBalance(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBalance(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void withdraw(::Ice::Int amount)
    {
        withdraw(amount, 0);
    }
    void withdraw(::Ice::Int amount, const ::Ice::Context& __ctx)
    {
        withdraw(amount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_withdraw(::Ice::Int amount, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_withdraw(amount, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_withdraw(::Ice::Int amount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_withdraw(amount, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_withdraw(::Ice::Int amount, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_withdraw(amount, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_withdraw(::Ice::Int amount, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_withdraw(amount, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_withdraw(::Ice::Int amount, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_withdraw(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_withdraw(amount, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int amount)
    {
        return begin_withdraw(amount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int amount, const ::Ice::Context& __ctx)
    {
        return begin_withdraw(amount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int amount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_withdraw(amount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int amount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_withdraw(amount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int amount, const ::Bank::Callback_Account_withdrawPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_withdraw(amount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int amount, const ::Ice::Context& __ctx, const ::Bank::Callback_Account_withdrawPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_withdraw(amount, &__ctx, __del, __cookie);
    }

    void end_withdraw(const ::Ice::AsyncResultPtr&);
    
private:

    void withdraw(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_withdraw(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void deposit(::Ice::Int amount)
    {
        deposit(amount, 0);
    }
    void deposit(::Ice::Int amount, const ::Ice::Context& __ctx)
    {
        deposit(amount, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_deposit(::Ice::Int amount, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deposit(amount, 0, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_deposit(::Ice::Int amount, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deposit(amount, 0, ::Ice::newCallback(completed, sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_deposit(::Ice::Int amount, const ::Ice::Context& ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_deposit(amount, &ctx, response, exception, sent);
    }
    ::Ice::AsyncResultPtr
    begin_deposit(::Ice::Int amount, const ::Ice::Context& ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_deposit(amount, &ctx, ::Ice::newCallback(completed, sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_deposit(::Ice::Int amount, const ::Ice::Context* ctx, const ::IceInternal::Function<void ()>& response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& exception, const ::IceInternal::Function<void (bool)>& sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_deposit(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_deposit(amount, ctx, new Cpp11CB(response, exception, sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount)
    {
        return begin_deposit(amount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Ice::Context& __ctx)
    {
        return begin_deposit(amount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deposit(amount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deposit(amount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Bank::Callback_Account_depositPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deposit(amount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int amount, const ::Ice::Context& __ctx, const ::Bank::Callback_Account_depositPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_deposit(amount, &__ctx, __del, __cookie);
    }

    void end_deposit(const ::Ice::AsyncResultPtr&);
    
private:

    void deposit(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_deposit(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Account> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_secure(bool __secure) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_twoway() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_oneway() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_batchOneway() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_datagram() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_batchDatagram() const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_compress(bool __compress) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Account> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Account*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Bank
{

class SystemManager : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void createAccount(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string login(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void keepalive(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void logout(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Account : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int getBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void withdraw(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void deposit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Bank
{

class SystemManager : virtual public ::IceDelegate::Bank::SystemManager,
                      virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void createAccount(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string login(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void keepalive(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void logout(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Account : virtual public ::IceDelegate::Bank::Account,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int getBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void withdraw(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deposit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Bank
{

class SystemManager : virtual public ::IceDelegate::Bank::SystemManager,
                      virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void createAccount(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string login(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void keepalive(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void logout(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Account : virtual public ::IceDelegate::Bank::Account,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int getBalance(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void withdraw(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void deposit(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Bank
{

class SystemManager : virtual public ::Ice::Object
{
public:

    typedef SystemManagerPrx ProxyType;
    typedef SystemManagerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void createAccount(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createAccount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string login(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___login(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void keepalive(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___keepalive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void logout(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___logout(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const SystemManager& l, const SystemManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SystemManager& l, const SystemManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Account : virtual public ::Ice::Object
{
public:

    typedef AccountPrx ProxyType;
    typedef AccountPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getBalance(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBalance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void withdraw(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___withdraw(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void deposit(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___deposit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Account& l, const Account& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Account& l, const Account& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Bank
{

template<class T>
class CallbackNC_SystemManager_createAccount : public Callback_SystemManager_createAccount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SystemManager_createAccount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_createAccount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_SystemManager_createAccountPtr
newCallback_SystemManager_createAccount(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_createAccount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SystemManager_createAccountPtr
newCallback_SystemManager_createAccount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_createAccount<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SystemManager_createAccountPtr
newCallback_SystemManager_createAccount(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_createAccount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SystemManager_createAccountPtr
newCallback_SystemManager_createAccount(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_createAccount<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SystemManager_createAccount : public Callback_SystemManager_createAccount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SystemManager_createAccount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_createAccount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SystemManager_createAccountPtr
newCallback_SystemManager_createAccount(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_createAccount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_createAccountPtr
newCallback_SystemManager_createAccount(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_createAccount<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_createAccountPtr
newCallback_SystemManager_createAccount(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_createAccount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_createAccountPtr
newCallback_SystemManager_createAccount(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_createAccount<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SystemManager_login : public Callback_SystemManager_login_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_SystemManager_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_login(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SystemManager_loginPtr
newCallback_SystemManager_login(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_login<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SystemManager_loginPtr
newCallback_SystemManager_login(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_login<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SystemManager_login : public Callback_SystemManager_login_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_SystemManager_login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_login(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SystemManager_loginPtr
newCallback_SystemManager_login(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_loginPtr
newCallback_SystemManager_login(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_login<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SystemManager_keepalive : public Callback_SystemManager_keepalive_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SystemManager_keepalive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_keepalive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_SystemManager_keepalivePtr
newCallback_SystemManager_keepalive(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_keepalive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SystemManager_keepalivePtr
newCallback_SystemManager_keepalive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_keepalive<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SystemManager_keepalivePtr
newCallback_SystemManager_keepalive(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_keepalive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SystemManager_keepalivePtr
newCallback_SystemManager_keepalive(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_keepalive<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SystemManager_keepalive : public Callback_SystemManager_keepalive_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SystemManager_keepalive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_keepalive(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SystemManager_keepalivePtr
newCallback_SystemManager_keepalive(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_keepalive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_keepalivePtr
newCallback_SystemManager_keepalive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_keepalive<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_keepalivePtr
newCallback_SystemManager_keepalive(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_keepalive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_keepalivePtr
newCallback_SystemManager_keepalive(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_keepalive<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SystemManager_logout : public Callback_SystemManager_logout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SystemManager_logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_logout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_SystemManager_logoutPtr
newCallback_SystemManager_logout(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_logout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SystemManager_logoutPtr
newCallback_SystemManager_logout(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_logout<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SystemManager_logoutPtr
newCallback_SystemManager_logout(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_logout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SystemManager_logoutPtr
newCallback_SystemManager_logout(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SystemManager_logout<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SystemManager_logout : public Callback_SystemManager_logout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SystemManager_logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::SystemManagerPrx __proxy = ::Bank::SystemManagerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_logout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SystemManager_logoutPtr
newCallback_SystemManager_logout(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_logout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_logoutPtr
newCallback_SystemManager_logout(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_logout<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_logoutPtr
newCallback_SystemManager_logout(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_logout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SystemManager_logoutPtr
newCallback_SystemManager_logout(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SystemManager_logout<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Account_getBalance : public Callback_Account_getBalance_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Account_getBalance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getBalance(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Account_getBalancePtr
newCallback_Account_getBalance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_getBalance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_getBalancePtr
newCallback_Account_getBalance(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_getBalance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Account_getBalance : public Callback_Account_getBalance_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Account_getBalance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getBalance(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Account_getBalancePtr
newCallback_Account_getBalance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_getBalance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_getBalancePtr
newCallback_Account_getBalance(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_getBalance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Account_withdraw : public Callback_Account_withdraw_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Account_withdraw(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_withdraw(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Account_withdrawPtr
newCallback_Account_withdraw(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_withdraw<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_withdrawPtr
newCallback_Account_withdraw(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_withdraw<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Account_withdrawPtr
newCallback_Account_withdraw(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_withdraw<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_withdrawPtr
newCallback_Account_withdraw(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_withdraw<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Account_withdraw : public Callback_Account_withdraw_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Account_withdraw(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_withdraw(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Account_withdrawPtr
newCallback_Account_withdraw(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_withdraw<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_withdrawPtr
newCallback_Account_withdraw(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_withdraw<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Account_withdrawPtr
newCallback_Account_withdraw(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_withdraw<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_withdrawPtr
newCallback_Account_withdraw(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_withdraw<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Account_deposit : public Callback_Account_deposit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Account_deposit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deposit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Account_depositPtr
newCallback_Account_deposit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_deposit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_depositPtr
newCallback_Account_deposit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_deposit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Account_depositPtr
newCallback_Account_deposit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_deposit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Account_depositPtr
newCallback_Account_deposit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Account_deposit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Account_deposit : public Callback_Account_deposit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Account_deposit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Bank::AccountPrx __proxy = ::Bank::AccountPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_deposit(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Account_depositPtr
newCallback_Account_deposit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_deposit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_depositPtr
newCallback_Account_deposit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_deposit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Account_depositPtr
newCallback_Account_deposit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_deposit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Account_depositPtr
newCallback_Account_deposit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Account_deposit<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
