// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `Bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Bank.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Bank__SystemManager__createAccount_name = "createAccount";

const ::std::string __Bank__SystemManager__login_name = "login";

const ::std::string __Bank__SystemManager__keepalive_name = "keepalive";

const ::std::string __Bank__SystemManager__logout_name = "logout";

const ::std::string __Bank__Account__getBalance_name = "getBalance";

const ::std::string __Bank__Account__withdraw_name = "withdraw";

const ::std::string __Bank__Account__deposit_name = "deposit";

}

namespace
{

const char* __Bank__BankException_name = "Bank::BankException";

struct __F__Bank__BankException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::BankException();
    }
};

class __F__Bank__BankException__Init
{
public:

    __F__Bank__BankException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::BankException", new __F__Bank__BankException);
    }

    ~__F__Bank__BankException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::BankException");
    }
};

const __F__Bank__BankException__Init __F__Bank__BankException__i;

}

Bank::BankException::~BankException() throw()
{
}

::std::string
Bank::BankException::ice_name() const
{
    return __Bank__BankException_name;
}

Bank::BankException*
Bank::BankException::ice_clone() const
{
    return new BankException(*this);
}

void
Bank::BankException::ice_throw() const
{
    throw *this;
}

void
Bank::BankException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::BankException", -1, true);
    __os->endWriteSlice();
}

void
Bank::BankException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __Bank__RegisterException_name = "Bank::RegisterException";

struct __F__Bank__RegisterException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::RegisterException();
    }
};

class __F__Bank__RegisterException__Init
{
public:

    __F__Bank__RegisterException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::RegisterException", new __F__Bank__RegisterException);
    }

    ~__F__Bank__RegisterException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::RegisterException");
    }
};

const __F__Bank__RegisterException__Init __F__Bank__RegisterException__i;

}

Bank::RegisterException::~RegisterException() throw()
{
}

::std::string
Bank::RegisterException::ice_name() const
{
    return __Bank__RegisterException_name;
}

Bank::RegisterException*
Bank::RegisterException::ice_clone() const
{
    return new RegisterException(*this);
}

void
Bank::RegisterException::ice_throw() const
{
    throw *this;
}

void
Bank::RegisterException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::RegisterException", -1, false);
    __os->endWriteSlice();
    ::Bank::BankException::__writeImpl(__os);
}

void
Bank::RegisterException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::BankException::__readImpl(__is);
}

namespace
{

const char* __Bank__InvalidPesel_name = "Bank::InvalidPesel";

struct __F__Bank__InvalidPesel : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::InvalidPesel();
    }
};

class __F__Bank__InvalidPesel__Init
{
public:

    __F__Bank__InvalidPesel__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::InvalidPesel", new __F__Bank__InvalidPesel);
    }

    ~__F__Bank__InvalidPesel__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::InvalidPesel");
    }
};

const __F__Bank__InvalidPesel__Init __F__Bank__InvalidPesel__i;

}

Bank::InvalidPesel::~InvalidPesel() throw()
{
}

::std::string
Bank::InvalidPesel::ice_name() const
{
    return __Bank__InvalidPesel_name;
}

Bank::InvalidPesel*
Bank::InvalidPesel::ice_clone() const
{
    return new InvalidPesel(*this);
}

void
Bank::InvalidPesel::ice_throw() const
{
    throw *this;
}

void
Bank::InvalidPesel::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::InvalidPesel", -1, false);
    __os->endWriteSlice();
    ::Bank::RegisterException::__writeImpl(__os);
}

void
Bank::InvalidPesel::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::RegisterException::__readImpl(__is);
}

namespace
{

const char* __Bank__AccountAlreadyExists_name = "Bank::AccountAlreadyExists";

struct __F__Bank__AccountAlreadyExists : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::AccountAlreadyExists();
    }
};

class __F__Bank__AccountAlreadyExists__Init
{
public:

    __F__Bank__AccountAlreadyExists__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::AccountAlreadyExists", new __F__Bank__AccountAlreadyExists);
    }

    ~__F__Bank__AccountAlreadyExists__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::AccountAlreadyExists");
    }
};

const __F__Bank__AccountAlreadyExists__Init __F__Bank__AccountAlreadyExists__i;

}

Bank::AccountAlreadyExists::~AccountAlreadyExists() throw()
{
}

::std::string
Bank::AccountAlreadyExists::ice_name() const
{
    return __Bank__AccountAlreadyExists_name;
}

Bank::AccountAlreadyExists*
Bank::AccountAlreadyExists::ice_clone() const
{
    return new AccountAlreadyExists(*this);
}

void
Bank::AccountAlreadyExists::ice_throw() const
{
    throw *this;
}

void
Bank::AccountAlreadyExists::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::AccountAlreadyExists", -1, false);
    __os->endWriteSlice();
    ::Bank::RegisterException::__writeImpl(__os);
}

void
Bank::AccountAlreadyExists::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::RegisterException::__readImpl(__is);
}

namespace
{

const char* __Bank__EmptyPassword_name = "Bank::EmptyPassword";

struct __F__Bank__EmptyPassword : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::EmptyPassword();
    }
};

class __F__Bank__EmptyPassword__Init
{
public:

    __F__Bank__EmptyPassword__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::EmptyPassword", new __F__Bank__EmptyPassword);
    }

    ~__F__Bank__EmptyPassword__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::EmptyPassword");
    }
};

const __F__Bank__EmptyPassword__Init __F__Bank__EmptyPassword__i;

}

Bank::EmptyPassword::~EmptyPassword() throw()
{
}

::std::string
Bank::EmptyPassword::ice_name() const
{
    return __Bank__EmptyPassword_name;
}

Bank::EmptyPassword*
Bank::EmptyPassword::ice_clone() const
{
    return new EmptyPassword(*this);
}

void
Bank::EmptyPassword::ice_throw() const
{
    throw *this;
}

void
Bank::EmptyPassword::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::EmptyPassword", -1, false);
    __os->endWriteSlice();
    ::Bank::RegisterException::__writeImpl(__os);
}

void
Bank::EmptyPassword::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::RegisterException::__readImpl(__is);
}

namespace
{

const char* __Bank__LoginException_name = "Bank::LoginException";

struct __F__Bank__LoginException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::LoginException();
    }
};

class __F__Bank__LoginException__Init
{
public:

    __F__Bank__LoginException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::LoginException", new __F__Bank__LoginException);
    }

    ~__F__Bank__LoginException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::LoginException");
    }
};

const __F__Bank__LoginException__Init __F__Bank__LoginException__i;

}

Bank::LoginException::~LoginException() throw()
{
}

::std::string
Bank::LoginException::ice_name() const
{
    return __Bank__LoginException_name;
}

Bank::LoginException*
Bank::LoginException::ice_clone() const
{
    return new LoginException(*this);
}

void
Bank::LoginException::ice_throw() const
{
    throw *this;
}

void
Bank::LoginException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::LoginException", -1, false);
    __os->endWriteSlice();
    ::Bank::BankException::__writeImpl(__os);
}

void
Bank::LoginException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::BankException::__readImpl(__is);
}

namespace
{

const char* __Bank__MultiLogin_name = "Bank::MultiLogin";

struct __F__Bank__MultiLogin : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::MultiLogin();
    }
};

class __F__Bank__MultiLogin__Init
{
public:

    __F__Bank__MultiLogin__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::MultiLogin", new __F__Bank__MultiLogin);
    }

    ~__F__Bank__MultiLogin__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::MultiLogin");
    }
};

const __F__Bank__MultiLogin__Init __F__Bank__MultiLogin__i;

}

Bank::MultiLogin::~MultiLogin() throw()
{
}

::std::string
Bank::MultiLogin::ice_name() const
{
    return __Bank__MultiLogin_name;
}

Bank::MultiLogin*
Bank::MultiLogin::ice_clone() const
{
    return new MultiLogin(*this);
}

void
Bank::MultiLogin::ice_throw() const
{
    throw *this;
}

void
Bank::MultiLogin::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::MultiLogin", -1, false);
    __os->endWriteSlice();
    ::Bank::LoginException::__writeImpl(__os);
}

void
Bank::MultiLogin::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::LoginException::__readImpl(__is);
}

namespace
{

const char* __Bank__AuthenticationFailed_name = "Bank::AuthenticationFailed";

struct __F__Bank__AuthenticationFailed : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::AuthenticationFailed();
    }
};

class __F__Bank__AuthenticationFailed__Init
{
public:

    __F__Bank__AuthenticationFailed__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::AuthenticationFailed", new __F__Bank__AuthenticationFailed);
    }

    ~__F__Bank__AuthenticationFailed__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::AuthenticationFailed");
    }
};

const __F__Bank__AuthenticationFailed__Init __F__Bank__AuthenticationFailed__i;

}

Bank::AuthenticationFailed::~AuthenticationFailed() throw()
{
}

::std::string
Bank::AuthenticationFailed::ice_name() const
{
    return __Bank__AuthenticationFailed_name;
}

Bank::AuthenticationFailed*
Bank::AuthenticationFailed::ice_clone() const
{
    return new AuthenticationFailed(*this);
}

void
Bank::AuthenticationFailed::ice_throw() const
{
    throw *this;
}

void
Bank::AuthenticationFailed::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::AuthenticationFailed", -1, false);
    __os->endWriteSlice();
    ::Bank::LoginException::__writeImpl(__os);
}

void
Bank::AuthenticationFailed::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::LoginException::__readImpl(__is);
}

namespace
{

const char* __Bank__OperationException_name = "Bank::OperationException";

struct __F__Bank__OperationException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::OperationException();
    }
};

class __F__Bank__OperationException__Init
{
public:

    __F__Bank__OperationException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::OperationException", new __F__Bank__OperationException);
    }

    ~__F__Bank__OperationException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::OperationException");
    }
};

const __F__Bank__OperationException__Init __F__Bank__OperationException__i;

}

Bank::OperationException::~OperationException() throw()
{
}

::std::string
Bank::OperationException::ice_name() const
{
    return __Bank__OperationException_name;
}

Bank::OperationException*
Bank::OperationException::ice_clone() const
{
    return new OperationException(*this);
}

void
Bank::OperationException::ice_throw() const
{
    throw *this;
}

void
Bank::OperationException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::OperationException", -1, false);
    __os->endWriteSlice();
    ::Bank::BankException::__writeImpl(__os);
}

void
Bank::OperationException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::BankException::__readImpl(__is);
}

namespace
{

const char* __Bank__SessionException_name = "Bank::SessionException";

struct __F__Bank__SessionException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::SessionException();
    }
};

class __F__Bank__SessionException__Init
{
public:

    __F__Bank__SessionException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::SessionException", new __F__Bank__SessionException);
    }

    ~__F__Bank__SessionException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::SessionException");
    }
};

const __F__Bank__SessionException__Init __F__Bank__SessionException__i;

}

Bank::SessionException::~SessionException() throw()
{
}

::std::string
Bank::SessionException::ice_name() const
{
    return __Bank__SessionException_name;
}

Bank::SessionException*
Bank::SessionException::ice_clone() const
{
    return new SessionException(*this);
}

void
Bank::SessionException::ice_throw() const
{
    throw *this;
}

void
Bank::SessionException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::SessionException", -1, false);
    __os->endWriteSlice();
    ::Bank::BankException::__writeImpl(__os);
}

void
Bank::SessionException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::BankException::__readImpl(__is);
}

namespace
{

const char* __Bank__InvalidSession_name = "Bank::InvalidSession";

struct __F__Bank__InvalidSession : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::InvalidSession();
    }
};

class __F__Bank__InvalidSession__Init
{
public:

    __F__Bank__InvalidSession__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::InvalidSession", new __F__Bank__InvalidSession);
    }

    ~__F__Bank__InvalidSession__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::InvalidSession");
    }
};

const __F__Bank__InvalidSession__Init __F__Bank__InvalidSession__i;

}

Bank::InvalidSession::~InvalidSession() throw()
{
}

::std::string
Bank::InvalidSession::ice_name() const
{
    return __Bank__InvalidSession_name;
}

Bank::InvalidSession*
Bank::InvalidSession::ice_clone() const
{
    return new InvalidSession(*this);
}

void
Bank::InvalidSession::ice_throw() const
{
    throw *this;
}

void
Bank::InvalidSession::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::InvalidSession", -1, false);
    __os->endWriteSlice();
    ::Bank::SessionException::__writeImpl(__os);
}

void
Bank::InvalidSession::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::SessionException::__readImpl(__is);
}

namespace
{

const char* __Bank__SessionExpired_name = "Bank::SessionExpired";

struct __F__Bank__SessionExpired : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Bank::SessionExpired();
    }
};

class __F__Bank__SessionExpired__Init
{
public:

    __F__Bank__SessionExpired__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Bank::SessionExpired", new __F__Bank__SessionExpired);
    }

    ~__F__Bank__SessionExpired__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Bank::SessionExpired");
    }
};

const __F__Bank__SessionExpired__Init __F__Bank__SessionExpired__i;

}

Bank::SessionExpired::~SessionExpired() throw()
{
}

::std::string
Bank::SessionExpired::ice_name() const
{
    return __Bank__SessionExpired_name;
}

Bank::SessionExpired*
Bank::SessionExpired::ice_clone() const
{
    return new SessionExpired(*this);
}

void
Bank::SessionExpired::ice_throw() const
{
    throw *this;
}

void
Bank::SessionExpired::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Bank::SessionExpired", -1, false);
    __os->endWriteSlice();
    ::Bank::SessionException::__writeImpl(__os);
}

void
Bank::SessionExpired::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::Bank::SessionException::__readImpl(__is);
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Bank::upCast(::IceProxy::Bank::SystemManager* p) { return p; }

void
::IceProxy::Bank::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Bank::SystemManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bank::SystemManager;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Bank::SystemManager::createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Bank__SystemManager__createAccount_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bank__SystemManager__createAccount_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bank::SystemManager* __del = dynamic_cast< ::IceDelegate::Bank::SystemManager*>(__delBase.get());
            __del->createAccount(pesel, password, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bank::SystemManager::begin_createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bank__SystemManager__createAccount_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bank__SystemManager__createAccount_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bank__SystemManager__createAccount_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(pesel);
        __os->write(password);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bank::SystemManager::end_createAccount(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bank__SystemManager__createAccount_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Bank::RegisterException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::std::string
IceProxy::Bank::SystemManager::login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Bank__SystemManager__login_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bank__SystemManager__login_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bank::SystemManager* __del = dynamic_cast< ::IceDelegate::Bank::SystemManager*>(__delBase.get());
            return __del->login(pesel, password, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bank::SystemManager::begin_login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bank__SystemManager__login_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bank__SystemManager__login_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bank__SystemManager__login_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(pesel);
        __os->write(password);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::Bank::SystemManager::end_login(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bank__SystemManager__login_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Bank::LoginException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Bank::SystemManager::keepalive(const ::std::string& sessionId, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Bank__SystemManager__keepalive_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bank__SystemManager__keepalive_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bank::SystemManager* __del = dynamic_cast< ::IceDelegate::Bank::SystemManager*>(__delBase.get());
            __del->keepalive(sessionId, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bank::SystemManager::begin_keepalive(const ::std::string& sessionId, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bank__SystemManager__keepalive_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bank__SystemManager__keepalive_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bank__SystemManager__keepalive_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sessionId);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bank::SystemManager::end_keepalive(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bank__SystemManager__keepalive_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Bank::SystemManager::logout(const ::std::string& sessionId, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Bank__SystemManager__logout_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bank__SystemManager__logout_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bank::SystemManager* __del = dynamic_cast< ::IceDelegate::Bank::SystemManager*>(__delBase.get());
            __del->logout(sessionId, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bank::SystemManager::begin_logout(const ::std::string& sessionId, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bank__SystemManager__logout_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bank__SystemManager__logout_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bank__SystemManager__logout_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(sessionId);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bank::SystemManager::end_logout(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bank__SystemManager__logout_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Bank::SystemManager::ice_staticId()
{
    return ::Bank::SystemManager::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bank::SystemManager::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bank::SystemManager);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bank::SystemManager::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bank::SystemManager);
}

::IceProxy::Ice::Object*
IceProxy::Bank::SystemManager::__newInstance() const
{
    return new SystemManager;
}
::IceProxy::Ice::Object* ::IceProxy::Bank::upCast(::IceProxy::Bank::Account* p) { return p; }

void
::IceProxy::Bank::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Bank::Account>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Bank::Account;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::Bank::Account::getBalance(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Bank__Account__getBalance_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bank__Account__getBalance_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bank::Account* __del = dynamic_cast< ::IceDelegate::Bank::Account*>(__delBase.get());
            return __del->getBalance(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bank::Account::begin_getBalance(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bank__Account__getBalance_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bank__Account__getBalance_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bank__Account__getBalance_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::Bank::Account::end_getBalance(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bank__Account__getBalance_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Bank::OperationException&)
            {
                throw;
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Bank::Account::withdraw(::Ice::Int amount, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Bank__Account__withdraw_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bank__Account__withdraw_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bank::Account* __del = dynamic_cast< ::IceDelegate::Bank::Account*>(__delBase.get());
            __del->withdraw(amount, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bank::Account::begin_withdraw(::Ice::Int amount, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bank__Account__withdraw_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bank__Account__withdraw_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bank__Account__withdraw_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(amount);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bank::Account::end_withdraw(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bank__Account__withdraw_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Bank::OperationException&)
            {
                throw;
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Bank::Account::deposit(::Ice::Int amount, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Bank__Account__deposit_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Bank__Account__deposit_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Bank::Account* __del = dynamic_cast< ::IceDelegate::Bank::Account*>(__delBase.get());
            __del->deposit(amount, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Bank::Account::begin_deposit(::Ice::Int amount, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Bank__Account__deposit_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Bank__Account__deposit_name, __del, __cookie);
    try
    {
        __result->__prepare(__Bank__Account__deposit_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(amount);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Bank::Account::end_deposit(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Bank__Account__deposit_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Bank::OperationException&)
            {
                throw;
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Bank::Account::ice_staticId()
{
    return ::Bank::Account::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Bank::Account::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Bank::Account);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Bank::Account::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Bank::Account);
}

::IceProxy::Ice::Object*
IceProxy::Bank::Account::__newInstance() const
{
    return new Account;
}

void
IceDelegateM::Bank::SystemManager::createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bank__SystemManager__createAccount_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(pesel);
        __os->write(password);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bank::RegisterException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::Bank::SystemManager::login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bank__SystemManager__login_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(pesel);
        __os->write(password);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bank::LoginException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Bank::SystemManager::keepalive(const ::std::string& sessionId, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bank__SystemManager__keepalive_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sessionId);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Bank::SystemManager::logout(const ::std::string& sessionId, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bank__SystemManager__logout_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(sessionId);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::Bank::Account::getBalance(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bank__Account__getBalance_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bank::OperationException&)
            {
                throw;
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Bank::Account::withdraw(::Ice::Int amount, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bank__Account__withdraw_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(amount);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bank::OperationException&)
            {
                throw;
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Bank::Account::deposit(::Ice::Int amount, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Bank__Account__deposit_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(amount);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Bank::OperationException&)
            {
                throw;
            }
            catch(const ::Bank::SessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::Bank::SystemManager::createAccount(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_pesel, const ::std::string& __p_password, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_pesel(__p_pesel),
            _m_password(__p_password)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bank::SystemManager* servant = dynamic_cast< ::Bank::SystemManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->createAccount(_m_pesel, _m_password, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_pesel;
        const ::std::string& _m_password;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bank__SystemManager__createAccount_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(pesel, password, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Bank::RegisterException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::Bank::SystemManager::login(const ::std::string& pesel, const ::std::string& password, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::std::string& __p_pesel, const ::std::string& __p_password, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_pesel(__p_pesel),
            _m_password(__p_password)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bank::SystemManager* servant = dynamic_cast< ::Bank::SystemManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->login(_m_pesel, _m_password, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::std::string& _result;
        const ::std::string& _m_pesel;
        const ::std::string& _m_password;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bank__SystemManager__login_name, ::Ice::Normal, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, pesel, password, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Bank::LoginException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Bank::SystemManager::keepalive(const ::std::string& sessionId, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_sessionId, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_sessionId(__p_sessionId)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bank::SystemManager* servant = dynamic_cast< ::Bank::SystemManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->keepalive(_m_sessionId, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_sessionId;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bank__SystemManager__keepalive_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(sessionId, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Bank::SessionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bank::SystemManager::logout(const ::std::string& sessionId, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_sessionId, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_sessionId(__p_sessionId)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bank::SystemManager* servant = dynamic_cast< ::Bank::SystemManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->logout(_m_sessionId, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_sessionId;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bank__SystemManager__logout_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(sessionId, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Bank::SessionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Int
IceDelegateD::Bank::Account::getBalance(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bank::Account* servant = dynamic_cast< ::Bank::Account*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getBalance(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bank__Account__getBalance_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Bank::OperationException&)
    {
        throw;
    }
    catch(const ::Bank::SessionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Bank::Account::withdraw(::Ice::Int amount, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_amount, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_amount(__p_amount)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bank::Account* servant = dynamic_cast< ::Bank::Account*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->withdraw(_m_amount, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_amount;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bank__Account__withdraw_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(amount, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Bank::OperationException&)
    {
        throw;
    }
    catch(const ::Bank::SessionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Bank::Account::deposit(::Ice::Int amount, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int __p_amount, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_amount(__p_amount)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Bank::Account* servant = dynamic_cast< ::Bank::Account*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->deposit(_m_amount, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int _m_amount;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Bank__Account__deposit_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(amount, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Bank::OperationException&)
    {
        throw;
    }
    catch(const ::Bank::SessionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Object* Bank::upCast(::Bank::SystemManager* p) { return p; }

namespace
{
const ::std::string __Bank__SystemManager_ids[2] =
{
    "::Bank::SystemManager",
    "::Ice::Object"
};

}

bool
Bank::SystemManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bank__SystemManager_ids, __Bank__SystemManager_ids + 2, _s);
}

::std::vector< ::std::string>
Bank::SystemManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bank__SystemManager_ids[0], &__Bank__SystemManager_ids[2]);
}

const ::std::string&
Bank::SystemManager::ice_id(const ::Ice::Current&) const
{
    return __Bank__SystemManager_ids[0];
}

const ::std::string&
Bank::SystemManager::ice_staticId()
{
    return __Bank__SystemManager_ids[0];
}

::Ice::DispatchStatus
Bank::SystemManager::___createAccount(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string pesel;
    ::std::string password;
    __is->read(pesel);
    __is->read(password);
    __inS.endReadParams();
    try
    {
        createAccount(pesel, password, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Bank::RegisterException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Bank::SystemManager::___login(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string pesel;
    ::std::string password;
    __is->read(pesel);
    __is->read(password);
    __inS.endReadParams();
    try
    {
        ::std::string __ret = login(pesel, password, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Bank::LoginException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Bank::SystemManager::___keepalive(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sessionId;
    __is->read(sessionId);
    __inS.endReadParams();
    try
    {
        keepalive(sessionId, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Bank::SessionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Bank::SystemManager::___logout(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string sessionId;
    __is->read(sessionId);
    __inS.endReadParams();
    try
    {
        logout(sessionId, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Bank::SessionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Bank__SystemManager_all[] =
{
    "createAccount",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "keepalive",
    "login",
    "logout"
};

}

::Ice::DispatchStatus
Bank::SystemManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Bank__SystemManager_all, __Bank__SystemManager_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bank__SystemManager_all)
    {
        case 0:
        {
            return ___createAccount(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___keepalive(in, current);
        }
        case 6:
        {
            return ___login(in, current);
        }
        case 7:
        {
            return ___logout(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bank::SystemManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Bank::SystemManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Bank::__patch(SystemManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Bank::SystemManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Bank::SystemManager::ice_staticId(), v);
    }
}

::Ice::Object* Bank::upCast(::Bank::Account* p) { return p; }

namespace
{
const ::std::string __Bank__Account_ids[2] =
{
    "::Bank::Account",
    "::Ice::Object"
};

}

bool
Bank::Account::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Bank__Account_ids, __Bank__Account_ids + 2, _s);
}

::std::vector< ::std::string>
Bank::Account::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Bank__Account_ids[0], &__Bank__Account_ids[2]);
}

const ::std::string&
Bank::Account::ice_id(const ::Ice::Current&) const
{
    return __Bank__Account_ids[0];
}

const ::std::string&
Bank::Account::ice_staticId()
{
    return __Bank__Account_ids[0];
}

::Ice::DispatchStatus
Bank::Account::___getBalance(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::Ice::Int __ret = getBalance(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Bank::OperationException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::Bank::SessionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Bank::Account::___withdraw(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int amount;
    __is->read(amount);
    __inS.endReadParams();
    try
    {
        withdraw(amount, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Bank::OperationException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::Bank::SessionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Bank::Account::___deposit(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int amount;
    __is->read(amount);
    __inS.endReadParams();
    try
    {
        deposit(amount, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Bank::OperationException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::Bank::SessionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Bank__Account_all[] =
{
    "deposit",
    "getBalance",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "withdraw"
};

}

::Ice::DispatchStatus
Bank::Account::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Bank__Account_all, __Bank__Account_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Bank__Account_all)
    {
        case 0:
        {
            return ___deposit(in, current);
        }
        case 1:
        {
            return ___getBalance(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___withdraw(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Bank::Account::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Bank::Account::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Bank::__patch(AccountPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Bank::AccountPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Bank::Account::ice_staticId(), v);
    }
}
