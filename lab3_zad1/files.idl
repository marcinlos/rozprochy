#ifndef FILES_IDL
#define FILES_IDL

#include "io.idl"

module files {

    exception PermissionDenied { };
    exception FileLocked { };
    exception FileInUse { };
    exception NoSuchFile { };

    interface Node;
    typedef sequence<Node> NodeSeq;

    interface FileCallback {
        void notify_file_changed(in Node file);
    };

    interface FileSystem {
        readonly attribute NodeSeq roots;
        Node find_file(in string path) raises (NoSuchFile);
        void register_callback(in FileCallback cb);
        void unregister_callback(in FileCallback cb);
    };

    enum FileType {
        FILE_REGULAR,
        FILE_DIR,
        FILE_SYMLINK,
        FILE_DEV,
        FILE_PIPE,
        FILE_SOC
    };
    
    interface Node {
        readonly attribute string name;
        readonly attribute long size;
        readonly attribute long permission;
        readonly attribute FileType type;
    };

	interface Directory : Node {
	    NodeSeq get_children() raises (PermissionDenied);
        Node get_child(in string name) raises (PermissionDenied, NoSuchFile);
	}; 
	
	interface Lock {
	   void unlock();
	};
    
    interface File : Node {
        Lock lock_read() raises (PermissionDenied, FileLocked, FileInUse);
        Lock lock_write() raises (PermissionDenied, FileLocked, FileInUse);
        io::InputStream begin_read() raises (PermissionDenied, FileLocked);
        io::OutputStream begin_write() raises (PermissionDenied, FileLocked);
        io::IOStream begin_io() raises (PermissionDenied, FileLocked);
    };

};

#endif // FILES_IDL
